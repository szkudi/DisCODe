/*!
\page beginner_discode_07_component_images_blurer Create a simple component
<div class="beginner">[Beginner level]</div>

\up_prevnext_top{beginner_discode_tutorials, beginner_discode_06_refreshedtriggered_sequencereader, beginner_discode_08_component_properties}

\section ts_objectives Tutorial objectives
The goal is to create a component responsible for bluring of the images.
Utilize the standard mean filter with 3-by-3 kernel. 

Instead of implementing the blue operation on your own please use the <a href="http://opencv.willowgarage.com/documentation/cpp/image_filtering.html?highlight=blur#blur">cv::blur</a> function from the OpenCV.

\section ts_structure Task structure
The structure of the ImageBlurer task is shown below.

<img src="images/ImageBlurer.png" style="margin: 5px; width: 500px;" alt="ImageBlurer"/>
\endhtmlonly

\note For more details regarding the structure please click <a href="images/Legend.png">here</a>.

\section ts_component_blur The ImageBlurer component
\subsection component_creation Utilize the existing tools to create the component body, configure cmake and generate makefile.
\lin_win_create_component

\subsection blurer_hpp_edit Edit the header file ImageBlurer.hpp
Edit the component header and perform changes listed below.
 - Enter the <b>protected</b> section of the <b>ImageBlurer_Processor</b> class and add input and output data ports.
\code
	// Input data stream
	Base::DataStreamIn <Mat> in_img;

	// Output data stream - processed image
	Base::DataStreamOut <Mat> out_img;
\endcode

 - Add event handler (when a new image will arrived) and event (raised when image the image processing will be done).
\code
	// Event handler function.
	void onNewImage();

	// Event handler.
	Base::EventHandler <ImageBlurer_Processor> h_onNewImage;

	// Event emited after the image is processed.
	Base::Event * newImage;
\endcode

\subsection blurer_cpp_edit Edit the source file ImageBlurer.cpp
Edit the component source and perform changes listed below.

 - In the body of the <b>OnInit()</b> method register data streams, events and event handlers.
\code
	// Register handler.
	h_onNewImage.setup(this, &ImageBlurer_Processor::onNewImage);
	registerHandler("onNewImage", &h_onNewImage);
	// Register event.
	newImage = registerEvent("newImage");
	// Register data streams.
	registerStream("in_img", &in_img);
	registerStream("out_img", &out_img);
\endcode

 - Add new <b>onNewImage()</b> method.
\code
void ImageBlurer_Processor::onNewImage()
{
	LOG(LTRACE) << "ImageBlurer_Processor::onNewImage\n";
	try {
		// Read image from input data stream.
		Mat img = in_img.read();
		// Perform bluring.
		blur(img, img, cv::Size(10,10));
		// Write blured image to output data stream.
		out_img.write(img);
		// Raise event.
		newImage->raise();
	} catch (...) {
		LOG(LERROR) << "ImageBlurer_Processor::onNewImage failed\n";
	}
}
\endcode

\note Compile and copy the component to bin library.

\section ts_file Task file
Create a new ImageBlurer.xml file on the base of the RefreshedTriggeredSequenceViewer.xml.
- Add the <b>Blur1</b> component to the list of components, set its executor to <b>Exec1</b>
\code
		<Blur1 type="ImageBlurer" thread="Exec1" group="s1">
		</Blur1>
\endcode

- Connect events and event handlers between: <b>Seq1.NewImage</b> - <b>Blur1.onNewImage</b> and <b>Blur1.NewImage</b> - <b>Wnd1.onNewImage</b> 
(remember to leave the required event connection betweend Kbd1 and Seq1 components).
\code
		<Event source="Kbd1.t_Pressed" destination="Seq1.onTrigger"/>
		<Event source="Seq1.newImage" destination="Blur1.onNewImage"/>
		<Event source="Blur1.newImage" destination="Wnd1.onNewImage"/>
\endcode

- Connect data ports between: <b>Seq1.Out</b> - <b>Blur1.In</b> and <b>Blur1.Out</b> - <b>Wnd1.In</b>.
\code
		<Seq1>
			<out_img type="out" group="Con1"/>
		</Seq1>
		<Blur1>
			<in_img  type="in" group="Con1"/>
			<out_img type="out" group="Con2"/>
		</Blur1>
		<Wnd1>
			<in_img  type="in" group="Con2"/>
		</Wnd1>
\endcode

\note For more task file details please refer to the previous tutorials.

\section ts_result Result
A sequence of blurred images  will be displayed.
\note Compare the results with original images <a href="http://segomo.elka.pw.edu.pl/~discode/datasets/opencv_classics">/home/discode/public_html/datasets/opencv_classics</a>

\section ts_sections Related sections
- \ref manuals_components : Description of components
- \ref manuals_datastreams : Description of data streams
- \ref manuals_events : Description of events


\up_prevnext_bottom{beginner_discode_tutorials, beginner_discode_06_refreshedtriggered_sequencereader, beginner_discode_08_component_properties}
*/
