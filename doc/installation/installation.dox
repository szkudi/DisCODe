// Installation
/*!
\page installation Installation instructions

Currently there are two installation possibilities: the whole DisCODe distribution or the DisCODe SDK.

\section sdk_installation The DisCODe SDKs
The Software Developement Kit (SDK) consists of four directories required for DisCODe execution and developement of new components:
- bin - contains binaries (DisCODe core, libraries, selected components),
- include - headers containing base classes and interfaces that can berequired during compilation,
- Tasks - folder containing selected tasks,
- Component - contains the Example component and <b>create</b> script utilized for creation of new component.

Select your operating system:
\htmlonly
<table style="border: 0px; margin-left: 40px;">
<tr><td style="padding: 4px 0; width: 60px; text-align: center; vertical-align: middle;"><img src="logos/gentoo_logo.png"></td><td style="padding: 4px; text-align: left; vertical-align: middle">
\endhtmlonly
\ref gentoo_sdk_installation (supported)
\htmlonly
</td>
<td>
Provides instructions regarding the method of the DisCODe SDK installation on machines controlled by the Gentoo OS (Segomo Server).
</td>
</tr>
<tr><td style="padding: 4px 0; width: 60px; text-align: center; vertical-align: middle;"><img src="logos/windows_logo.png"></td><td style="padding: 4px; text-align: left; vertical-align: middle">
\endhtmlonly
\ref windows_sdk_installation (supported)
\htmlonly
</td>
<td>
Provides instructions regarding the method of the DisCODe SDK installation under the Windows OS (32bit).
</td></tr>
</table>
\endhtmlonly

\section sdk_component Utilization of DisCODe SDKs
There are tools prepared that facilitate the creation of new components and generation of Makefiles required for their compilation.

Select your operating system:
\htmlonly
<table style="border: 0px; margin-left: 40px;">
<tr><td style="padding: 4px 0; width: 60px; text-align: center; vertical-align: middle;"><img src="logos/linux_logo.png"></td><td style="padding: 4px; text-align: left; vertical-align: middle">
\endhtmlonly
\ref linux_sdk_new_comp (supported)
\htmlonly
</td>
<td>
Describes how to utilize the SDK in order to create and compile new component under OS from the Linux family.
</td>
</tr>
<tr><td style="padding: 4px 0; width: 60px; text-align: center; vertical-align: middle;"><img src="logos/windows_logo.png"></td><td style="padding: 4px; text-align: left; vertical-align: middle">
\endhtmlonly
\ref win_sdk_new_comp (supported)
\htmlonly
</td>
<td>
Describes how to utilize the SDK in order to create and compile new component under Windows OS (32bit).
</td></tr>
</table>
\endhtmlonly



\section stepsbystep The DisCODe source
The DisCODe source contains the code sources (core, components, utilities) and enables you to compile the whole project on your own.

Select your operating system:
\htmlonly
<table style="border: 0px; margin-left: 40px;">
<tr><td style="padding: 4px 0; width: 60px; text-align: center; vertical-align: middle;"><img src="logos/ubuntu_logo.png"></td><td style="padding: 4px; text-align: left; vertical-align: middle">
\endhtmlonly
\ref ubuntu (supported)
\htmlonly
</td>
<td>
Provides detailed step by step instructions how to download, build and run DisCODe on Ubuntu OS.
</td>
</tr>
<tr><td style="padding: 4px 0; width: 60px; text-align: center; vertical-align: middle;"><img src="logos/windows_logo.png"></td><td style="padding: 4px; text-align: left; vertical-align: middle">
\endhtmlonly
\ref windows (supported)
\htmlonly
</td>
<td>
Provides detailed step by step instructions how to download, build and run DisCODe on Windows OS.
</td></tr>
</table>
\endhtmlonly

\note Distributions require installation of additional \ref software_utilities.

- \ref win_dis_sdk


\section system_ide System and IDE related stuff

- \ref git_intro \n
  Introduction to Git and Github as well.
- \ref software_utilities\n
  List of required software and libraries.
- \ref eclipseconfig\n
  Required plugins, importing repository, using CMake.
*/

//\beginlinklist
//\endlinklist




// Eclipse configuration
/// \todo translate to english
/// \todo insert images
/*!
\page eclipseconfig Configurating Eclipse

\section eclipse_needed Required software

- Eclipse CDT: http://www.eclipse.org/cdt/
- CMake: http://www.cmake.org/
- EGit plugin (for handling git repository under EclipsE): http://download.eclipse.org/egit/updates
- Feature - CMake Editor for CMake files highlighting etc: http://cmakeed.sourceforge.net/eclipse/

\section eclipse_import Import repository

* Importujemy nowy projekt, wybierając opcję importu repozytorium Git
: [[File:01.jpg]]


* W kolejnym oknie w polu URI podajemy adres repozytorium:
\cons
ssh://username\@fradia.git.sourceforge.net/gitroot/fradia/fradia
\endcons
Wszystkie pozostałe potrzebne pola powinny zostać uzupełnione automatycznie.

: [[File:02.jpg]]


* Wybieramy gałąź do sklonowania (master) i przechodzimy dalej
: [[File:03.jpg]]


* Uzupełniamy dane nowego projektu (folder, gdzie ma zostać utworzony) i \b odznaczamy opcję importu projektów
: [[File:04.jpg]]

Po tych operacjach dane z repozytorium zostaną sklonowane do naszego katalogu roboczego,
nie pojawi się jednak w eksploratorze projektów Eclipse'a. Trzeba go (znowu) zaimportować.

\section eclipse_import_proj Import projektu ze sklonowanego repozytorium do Eclipse

* Wybieramy opcję tworzenia nowego projektu C++, zaznaczamy pusty projekt Makefile,
oraz wybieramy "Other toolchain". \b Ważne - jako katalog do stworzenia projektu
podajemy katalog, do którego zaimportowaliśmy repozytorium (w poprzednim punkcie)
: [[File:05.jpg]]


* W kolejnym oknie wybieramy zaawansowane ustawienia projektu
: [[File:06.jpg]]


* W gałęzi dotyczącej budowania projektu C++ \b odznaczamy \"Use default build command\"
i wpisujemy własną komendę:
\cons
make -C ${ProjDirPath}/build
\endcons
: [[File:07.jpg]]

W tym momencie projekt powinien pojawić się w ekploratorze, jednak trzeba jeszcze stworzyć makefile.

\section eclipse_makefile Tworzenie pliku makefile

W konsoli przechodzimy do katalogu z projektem i wykonujemy następującą sekwencję poleceń:
\cons
mkdir build
cd build
cmake .. -G \<generator_name\>
\endcons

Przy czym podajemy odpowiedni dla używanego systemu generator:
* Windows:
\cons
cmake .. -G "MinGW Makefiles"
\endcons
* Linux:
\cons
cmake .. -G "Unix Makefiles"
\endcons

Teraz już projekt powinien się poprawnie budować poprzez Eclipse. Po wprowadzeniu
zmian w plikach CMakeLists.txt CMake powinien się uruchomić automatycznie na początku
budowania projektu, tak więc nie powinno być konieczności ręcznego jego wywoływania.

Pozostało nam jeszcze poinformowanie go o tym, że projekt jest zarządzany przy
użyciu Gita (niestety, pomimo wtyczki Eclipse tego nie wykrywa automatycznie).

\section eclipse_git Dodawanie obsługi Git dla projektu z poziomu Eclipse

* W menu projektu (dostępnym po kliknięciu na jego nazwie prawym przyciskiem)
wybieramy polecenie Team->Share Project...
: [[File:08.jpg]]


* Zaznaczamy typ repozytorium (Git)
: [[File:09.jpg]]


* W kolejnym oknie zaznaczamy jedyną dostępną opcję i kończymy kreatora.
: [[File:10.jpg]]


W tym momencie wszystkie operacje związane z repozytorium mogą być wykonywane
z poziomu Eclipse.
*/

// Creating image processor
/*!
\page newprocessor Creating image processor

\section Goals

Goal of this tutorial is to show how simple it is to create components in
FraDIA and to introduce key concepts related with component itself. To make
example more practical we'll implement processor converting image between
different colorspaces.

\section newprocessor_template Component template

All components (sources, data processors etc) have to derive from Base::Component
class. It takes care of events and data streams management (what these are will
be explained later on) as well as defines common interface for all components.

So, let's do it. Code first, then explanation.
\code
#include "Component_Aux.hpp"                     // 1

namespace Processors {                        // 2
namespace ColorConv {

class ColorConv : public Base::Component {       // 3
public:
	bool initialize() {                       // 4
		return true;
	}

	bool finish() {                           // 5
		return true;
	}

	int step() {                              // 6
		return 0;
	}
};

} //: namespace ColorConv
} //: namespace Processors
\endcode

And here's explanation:

-# First of all we need some includes. Component_Aux.hpp is main include file for
   every component. It includes all necessary headers and contains some useful
   macros, which we'll be using.
-# In order to avoid namespace pollution with our classes and functions (we can
   have many helper objects) it's required to put whole stuff into it's own namespace.

*/

// Git intro
/*!
\page git_intro Getting started with Git and GitHub

\section git_install Git install

The first step to set up FraDIA source code for work with Git is to download a Git software.
- If you are using recent Linux distribution, just ask your package manager to do this job.
- For Windows there are some GUI based Gits out there, but this tutorial will only explain
  howto work with command line tools. Probably the right one is the
  <a href="http://code.google.com/p/msysgit/">msysGit</a> (you have to download
  a \tt{Git-x.x.x.x-*.exe} file)
- If you are brave enough to use Git under your Eclipse editor, please check this
  <a href="http://github.com/guides/using-the-egit-eclipse-plugin-with-github">tutorial</a>.

\section git_github Get a GitHub account

As long as GitHub is the best code hosting service in the world - we will use it.
- Just try to login and follow instructions to get a free Open Source plan account.
- Next you have to setup a SSH keys to authenticate against GitHub service. Simply
  follow these <a href="http://help.github.com/linux-key-setup/">steps</a>.

\section git_config Git config

In order introduce yourself to Git, as well as to other developers, just do:
\cons
git config --global user.name "Tekkub"
git config --global user.email "tekkub@gmail.com"
\endcons

To link your personality with Github account do:
\cons
git config --global github.user Your_Github_Username
\endcons

To enable color console output:
\cons
git config --global color.diff auto
git config --global color.status auto
git config --global color.branch auto
\endcons

To use visual merge tool, <a href="http://meld.sourceforge.net/">Meld</a>:
\cons
git config --global merge.tool meld
\endcons

\section git_develop Become a developer

Just visit the "mainstream" <a href="http://github.com/maciek-slon/FraDIA/">FraDIA project</a>
and press a fork button to create your own development branch. Now it is time to
actually pull down a code. Follow steps "Forking a project" and "Setting up"
screenshots from <a href="http://help.github.com/forking/">here</a>. Just to compare:

<table class="simple_table">
<tr><td class="head">SVN</td><td class="head">Git</td></tr>
<tr><td>\tt{svn checkout}</td><td>\tt{git clone}</td></tr>
<tr><td>\tt{svn up}</td><td>\tt{git pull}</td></tr>
</table>

\section git_work Start your work!

Hack, hack, hack... In the meantime you should read any Git tutorial, which will
get you familiar with \tt{commit}, \tt{add}, \tt{status} commands (these are the basic one)
and a lots of more (those you learn later).

GitHub is willing to help you with a list of <a href="http://github.com/guides/home">tutorials</a>,
<a href="http://github.com/guides/git-screencasts">screencasts</a> and an every
day commands <a href="http://github.com/guides/git-cheat-sheet">list</a>.

Finally open the same <a href="http://help.github.com/forking/">page</a> as previously
and this time read the "Pushing your changes" section. Please fell the difference:

<table class="simple_table">
<tr><td class="head">SVN</td><td class="head">Git</td><td class="head">notes</td></tr>
<tr><td>\tt{svn commit}</td><td>\tt{git commit -a}</td><td>this one works locally</td></tr>
<tr><td>\tt{svn commit}</td><td>\tt{git push}</td><td>this one actually pushes a bunch of commits to GitHub</td></tr>
</table>

\section git_share When you wish to share your work

Now, as your really big improvement is completed, please share it with the rest
of community. It is as easy as 1-2-3 (which I mean a three first steps from this
<a href="http://github.com/guides/pull-requests">page</a>). All the remaining work
will be done by a main project developer after making sure, that your code is good
enough to fill the high standards of robotic software framework.

*/



